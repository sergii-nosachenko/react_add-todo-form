{"version":3,"sources":["helpers.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["getUser","users","userId","find","user","id","UserInfo","name","email","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","username","visibleTodos","usersFromServer","App","useState","setTitle","titleError","setTitleError","setUserId","userIdError","setUserIdError","action","method","onSubmit","event","preventDefault","newTodo","Math","max","push","htmlFor","type","value","placeholder","onChange","target","replace","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.549c3de4.chunk.js","sourcesContent":["import { User } from './types/User';\n\nexport const getUser = (users: User[], userId: number) => (\n  users.find(user => user.id === userId)\n);\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user: { name, email } }) => (\n  <a className=\"UserInfo\" href={`mailto:${email}`}>\n    {name}\n  </a>\n);\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo: {\n    id,\n    title,\n    completed,\n    user,\n  },\n}) => {\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo/TodoInfo';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => <TodoInfo todo={todo} key={todo.id} />)}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { ChangeEvent, FormEvent, useState } from 'react';\nimport { getUser } from './helpers';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport { Todo } from './types/Todo';\n\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst visibleTodos: Todo[] = todosFromServer.map(todo => {\n  const newTodo = {\n    ...todo,\n    user: getUser(usersFromServer, todo.userId),\n  };\n\n  return newTodo;\n});\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [userIdError, setUserIdError] = useState(false);\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (title === '' || userId === 0) {\n      setTitleError(title === '');\n      setUserIdError(userId === 0);\n\n      return;\n    }\n\n    const lastId = Math.max(0, ...visibleTodos.map(({ id }) => id));\n\n    const newTodo: Todo = {\n      id: lastId + 1,\n      title,\n      userId,\n      completed: false,\n      user: getUser(usersFromServer, userId),\n    };\n\n    visibleTodos.push(newTodo);\n\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleTitleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setTitleError(false);\n\n    setTitle(\n      value.replace(/[^\\wа-яa-z\\d ]/gi, ''),\n    );\n  };\n\n  const handleUserChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setUserIdError(false);\n    setUserId(+value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">\n            {'Title: '}\n          </label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            id=\"title\"\n            data-cy=\"titleInput\"\n            value={title}\n            placeholder=\"Enter a title\"\n            onChange={handleTitleChange}\n          />\n          {titleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">\n            {'User: '}\n          </label>\n          <select\n            data-cy=\"userSelect\"\n            name=\"user\"\n            id=\"user\"\n            value={userId}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(({ name, id }) => (\n              <option value={id} key={id}>{name}</option>\n            ))}\n          </select>\n\n          {userIdError && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}